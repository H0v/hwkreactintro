{"version":3,"sources":["counter.js","serviceWorker.js","index.js","App.js"],"names":["Counter","props","counter","JSON","parse","localStorage","getItem","state","setItem","String","this","setState","onClick","increment","decrement","reset","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","className","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KA4CeA,E,YAzCX,WAAYC,GAAQ,IAAD,sBACf,4CAAMA,IACN,IAAMC,EAAUC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,EAFhD,OAGf,EAAKC,MAAQ,CACTL,QAAUA,GAJC,E,yEASfG,aAAaG,QAAQ,UAAUC,OAAOC,KAAKH,MAAML,QAAU,IACvDQ,KAAKC,UAAS,SAAAJ,GAAK,MAAK,CACxBL,SAAWG,aAAaC,QAAQ,iB,kCAIT,IAAvBI,KAAKH,MAAML,UACXG,aAAaG,QAAQ,UAAUC,OAAOC,KAAKH,MAAML,SAAW,IAC5DQ,KAAKC,UAAS,SAAAJ,GAAK,MAAK,CACrBL,SAAWG,aAAaC,QAAQ,kB,8BAMvCD,aAAaG,QAAQ,UAAU,KAC/BE,KAAKC,UAAS,SAAAJ,GAAK,MAAK,CACpBL,SAAWG,aAAaC,QAAQ,iB,+BAG9B,IAAD,OACL,OACI,oCACA,4BAAQM,QAAS,kBAAM,EAAKC,cAA5B,aACA,8BAAOH,KAAKH,MAAML,SAClB,4BAAQU,QAAS,kBAAM,EAAKE,cAA5B,aACA,4BAAQF,QAAS,kBAAM,EAAKG,UAA5B,c,GApCUC,IAAMC,WCURC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,mBCFT,WACL,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,SDDU,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.debe22ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Counter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const counter = JSON.parse(localStorage.getItem(\"counter\")) || 0;\r\n        this.state = { \r\n            counter : counter\r\n         }\r\n    }\r\n\r\n    increment(){\r\n        localStorage.setItem(\"counter\",String(this.state.counter + 1));\r\n            this.setState(state => ({\r\n            counter : +localStorage.getItem(\"counter\")\r\n        }));\r\n    }\r\n    decrement(){\r\n        if( this.state.counter !== 0){\r\n            localStorage.setItem(\"counter\",String(this.state.counter + -1));\r\n            this.setState(state => ({\r\n               counter : +localStorage.getItem(\"counter\")\r\n            }));\r\n        }\r\n\r\n    }\r\n    reset(){\r\n        localStorage.setItem(\"counter\",\"0\");\r\n        this.setState(state => ({\r\n            counter : +localStorage.getItem(\"counter\")\r\n         }));\r\n    }\r\n    render() { \r\n        return ( \r\n            <>\r\n            <button onClick={() => this.increment()}>Increment</button>\r\n            <span>{this.state.counter}</span>\r\n            <button onClick={() => this.decrement()}>Decrement</button>\r\n            <button onClick={() => this.reset()}>Reset</button>\r\n            </>\r\n            );\r\n    }\r\n}\r\n \r\nexport default Counter;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from '../src/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nexport function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Counter/>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}